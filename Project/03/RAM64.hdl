// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    Not(in= address[3], out= notAddr0);
    Not(in= address[4], out= notAddr1);
    Not(in= address[5], out= notAddr2);

    // Compute the control signals for each RAM8 
    And(a=notAddr0, b=notAddr1, out=addr00);
    And(a=address[3], b=notAddr1, out=addr01);
    And(a=notAddr0, b=address[4], out=addr10);
    And(a=address[3], b=address[4], out=addr11);

    And(a=addr00, b=notAddr2, out=addr000);
    And(a=addr01, b=notAddr2, out=addr001);
    And(a=addr10, b=notAddr2, out=addr010);
    And(a=addr11, b=notAddr2, out=addr011);
    And(a=addr00, b=address[5], out=addr100);
    And(a=addr01, b=address[5], out=addr101);
    And(a=addr10, b=address[5], out=addr110);
    And(a=addr11, b=address[5], out=addr111);

    // Combine with the load signal
    And(a=load, b=addr000, out=load0);
    And(a=load, b=addr001, out=load1);
    And(a=load, b=addr010, out=load2);
    And(a=load, b=addr011, out=load3);
    And(a=load, b=addr100, out=load4);
    And(a=load, b=addr101, out=load5);
    And(a=load, b=addr110, out=load6);
    And(a=load, b=addr111, out=load7);

    RAM8(in= in, load= load0, address= address[0..2], out= out0);
    RAM8(in= in, load= load1, address= address[0..2], out= out1);
    RAM8(in= in, load= load2, address= address[0..2], out= out2);
    RAM8(in= in, load= load3, address= address[0..2], out= out3);
    RAM8(in= in, load= load4, address= address[0..2], out= out4);
    RAM8(in= in, load= load5, address= address[0..2], out= out5);
    RAM8(in= in, load= load6, address= address[0..2], out= out6);
    RAM8(in= in, load= load7, address= address[0..2], out= out7);

    Mux8Way16(a= out0, b= out1, c= out2, d= out3, e= out4, f= out5, g= out6, h= out7, sel= address[3..5], out= out);
}